/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.schoolproject.pos;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author BIGMAN
 */
public class Transaction extends javax.swing.JPanel {

    private DefaultTableModel model;
    
    /**
     * Creates new form Transaction
     */
    public Transaction(DefaultTableModel model) {
        this.model = model;
        initComponents();
        itemTable.setModel(model);
        itemTable.setDefaultEditor(Object.class, null);
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        itemTable = new javax.swing.JTable();
        editBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        delete = new javax.swing.JButton();

        itemTable.setBackground(new java.awt.Color(0, 178, 255));
        itemTable.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        itemTable.setForeground(new java.awt.Color(255, 255, 255));
        itemTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Date", "Name", "Address", "Item", "Quantity", "Item Price", "Total Price"
            }
        ));
        itemTable.setRowHeight(40);
        itemTable.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                itemTablePropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(itemTable);

        editBtn.setText("Edit");
        editBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBtnActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("Transactions:");

        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 797, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(editBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 416, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(delete))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void editBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = itemTable.getSelectedRow();
        if (selectedRow != -1) {
            String item = itemTable.getValueAt(selectedRow, 3).toString();
            String qty = itemTable.getValueAt(selectedRow, 4).toString();

            editEntry edit = new editEntry(itemTable, selectedRow);
            edit.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(null, "Select a data row to edit.");
        }

        updateSave();
        updateTable(); 
    }//GEN-LAST:event_editBtnActionPerformed
    
    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        ArrayList<String> data = new ArrayList();
        try{
            FileReader fr = new FileReader("sales.csv");
            BufferedReader br = new BufferedReader(fr);
            String line;
            while ((line = br.readLine()) != null) {
            data.add(line);
        }
    } catch (IOException e) {
        e.printStackTrace();
        }
        int res = JOptionPane.showConfirmDialog(null, "Do You Want To Delete This Entry?", "Select", JOptionPane.YES_NO_OPTION);
        
        if(res == JOptionPane.YES_OPTION){
        int idx = itemTable.getSelectedRow();
            
        if (idx != -1 && idx + 1 < data.size()) {
        data.remove(idx + 1);
            }
        
        try (FileWriter updatesave = new FileWriter("sales.csv")) {
            updatesave.write(data.get(0) + "\n");

            for (int i = 1; i < data.size(); i++) {
                updatesave.write(data.get(i) + "\n");
            }

            itemTable.clearSelection();
            } catch (IOException e) {
            e.printStackTrace();
        }
        updateTable();
            
        }else if(res == JOptionPane.NO_OPTION){
            JOptionPane.showMessageDialog(null, "Selected No");
            itemTable.clearSelection();
            
        }else{
            JOptionPane.showMessageDialog(null, "Canceled Operation");
        }
    }//GEN-LAST:event_deleteActionPerformed

    private void itemTablePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_itemTablePropertyChange
        // TODO add your handling code here:
        
        
        
    }//GEN-LAST:event_itemTablePropertyChange
    public void updateTable(){
    DefaultTableModel model = new DefaultTableModel();
    itemTable.clearSelection();

    try {
        BufferedReader br = new BufferedReader(new FileReader("sales.csv"));
        String headerLine = br.readLine();  // read header
        if (headerLine != null) {
            String[] headers = headerLine.split(",");
            model.setColumnIdentifiers(headers);
        }
    
        String line;
        while ((line = br.readLine()) != null) {
            String[] rowData = line.split(",");
            model.addRow(rowData);
        }
        br.close();

        itemTable.setModel(model);

    } catch (IOException e) {
            e.printStackTrace();
    }
}
    
    public JTable itemtable(){
        return itemTable;
    }
    public void updateSave(){
        ArrayList<String> data = new ArrayList();
        try{
            FileReader fr = new FileReader("sales.csv");
            BufferedReader br = new BufferedReader(fr);
            String line;
            while ((line = br.readLine()) != null) {
            data.add(line);
            }
        } catch (IOException e) {
            e.printStackTrace();
            }
        
        try (FileWriter updatesave = new FileWriter("sales.csv")) {
            updatesave.write(data.get(0) + "\n");

            for (int i = 1; i < data.size(); i++) {
                updatesave.write(data.get(i) + "\n");
            }

            itemTable.clearSelection();
            } catch (IOException e) {
            e.printStackTrace();
        }
    }
    public void openEditForm() {
        int selectedRow = itemTable.getSelectedRow();
        if (selectedRow != -1) {
            // Pass the table and selected row to EditForm
            editEntry editForm = new editEntry(itemTable, selectedRow);
            editForm.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row to edit.");
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton delete;
    private javax.swing.JButton editBtn;
    private javax.swing.JTable itemTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
